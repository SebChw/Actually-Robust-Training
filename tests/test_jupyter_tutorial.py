from cookiecutter.main import cookiecutter
import os
import subprocess
import filecmp
import shutil
import filecmp
import pytest

def download_tutorial():
    """
    Downloads the tutorial from the GitHub repository using Cookiecutter.
    """
    try:
        cookiecutter(
            "https://github.com/SebChw/art_template.git",
            no_input=True,
            extra_context={"project_name": "mnist_tutorial", "author": "test", "email": "test"},  # Pass the project_name to the template,
            checkout="mnist_tutorial_cookiecutter",  # Use the latest version of the template
        )
    except Exception as e:
        print("Error while generating project using Cookiecutter:", str(e))
        raise e

def clean_up():
    """
    Removes the downloaded tutorial directory.
    """
    print("Cleaning up...")
    shutil.rmtree("mnist_tutorial")

def run_jupyter_notebook():
    """
    Runs the Jupyter notebook for the downloaded tutorial.
    """
    command = "cd mnist_tutorial/exp1 && pytest --nbmake ."
    # This should work, it seems like there is a bug in nbmake librabry.
    # os.system("pytest --nbmake ./mnist_tutorial/exp1")
    # When the command is run in the same directory as the notebook and the path is removed it works.
    result = subprocess.run(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # also solves the problem with data_module.py and baselines.py
    return result
   

def check_outputs():
    """
    Checks the output files generated by the Jupyter notebook with expected output.
    """
    utils_folder = './utils'
    jupyter_outputs_folder = './mnist_tutorial/exp1'

    for root, dirs, files in os.walk(utils_folder):
        for file in files:
            utils_file_path = os.path.relpath(os.path.join(root, file), start=utils_folder)
            jupyter_file_path = os.path.join(jupyter_outputs_folder, utils_file_path)
            assert os.path.isfile(jupyter_file_path) == True
            assert filecmp.cmp(os.path.join(utils_folder, utils_file_path), jupyter_file_path) == True

    # check png's
    images = [f"augmentations_{x}.png" for x in range(10)] + [f"checkpoints\data_analysis_Data analysis\class_images\class_{x}.png" for x in range(10)]
    for image in images:
        assert os.path.isfile(os.path.join(jupyter_outputs_folder, image)) == True

    # check unreadable files
    unreadable = ["debug_art.log"]
    for file in unreadable:
        assert os.path.isfile(os.path.join(jupyter_outputs_folder, file)) == True

    
def test_tutorial():
    """
    Tests the downloaded tutorial by running the Jupyter notebook and checking the output files.
    """
    if os.path.isdir("mnist_tutorial"):
        clean_up()
    download_tutorial()
    exit_code = run_jupyter_notebook()
    if exit_code.returncode is not 0:
        print(exit_code.stdout.decode("utf-8"))
        pytest.fail("Jupyter notebook failed.")
    check_outputs()
    clean_up()

if __name__ == "__main__":
    test_tutorial()
    